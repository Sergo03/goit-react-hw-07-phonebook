{"version":3,"sources":["Render/Style.module.css","Filter/Style.module.css","redux/Contacts/action.js","redux/Contacts/operations.js","redux/Contacts/contacts-selectors.js","Form/Form.js","Filter/Filter.js","Render/RenderContactList.js","App.js","redux/Contacts/reducer.js","redux/store.js","index.js","Form/Style.module.css"],"names":["module","exports","fetchContactRequest","createAction","fetchContactSuccsess","fetchContactError","addContactRequest","addContactSuccsess","addContactError","deleteContactRequest","deleteContactSuccsess","deleteContactError","changeFilter","axios","defaults","baseURL","getIsLoadingContacts","state","contacts","loading","getFilter","filter","getError","error","getItems","items","getVisibalContacts","createSelector","normalizedFilter","toLowerCase","contact","name","includes","Form","number","handleinput","e","setState","currentTarget","value","handleSubmit","preventDefault","isIncludeName","props","find","alert","onSubmit","reset","this","className","style","label","input_name","type","pattern","title","required","onChange","input_tel","btn_add","Component","connect","selectors","dispatch","data","action","post","then","catch","operations","actions","onDeleteContact","id","delete","map","contact_item","btn_del","onClick","App","fetchContacts","isLoadingContacts","submitForm","get","createReducer","payload","_","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","store","configureStore","reducer","contactsReducer","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.86f1a3f1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn_del\":\"Style_btn_del__3izHy\",\"contact_item\":\"Style_contact_item__16F5u\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Style_label__kPIUp\"};","\nimport { createAction } from '@reduxjs/toolkit';\n\nexport const fetchContactRequest = createAction('contacts/fetchContactRequest');\nexport const fetchContactSuccsess = createAction('contacts/fetchCotactSuccsess');\nexport const fetchContactError = createAction('contacts/fetchContactError');\n\nexport const addContactRequest = createAction('contacts/addContactRequest');\nexport const addContactSuccsess = createAction('contacts/addCotactSuccsess');\nexport const addContactError = createAction('contacts/addContactError');\n\nexport const deleteContactRequest = createAction('contacts/deleteContactRequest');\nexport const deleteContactSuccsess = createAction('contacts/deleteCotactSuccsess');\nexport const deleteContactError = createAction('contacts/deleteContactError');\n\n\n\n\n export const  changeFilter=createAction('contacts/changeFilter')\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","import axios from 'axios'\r\nimport * as action from './action'\r\n\r\n\r\naxios.defaults.baseURL = 'http://localhost:3000';\r\n\r\n\r\nexport const fetchContact = () => dispatch => {\r\n    dispatch(action.fetchContactRequest());\r\n    axios.get('/contacts').then(({ data }) => dispatch(action.fetchContactSuccsess(data)))\r\n        .catch(error => dispatch(action.fetchContactError(error)));\r\n};\r\n\r\nexport const addContact = ({ name, number }) => dispatch => {\r\n    const contact = {\r\n        name,\r\n        number\r\n    };\r\n    dispatch(action.addContactRequest());\r\n    axios.post('/contacts', contact).then(({ data }) => dispatch(action.addContactSuccsess(data)),\r\n    ).catch(error => dispatch(action.addContactError(error)));\r\n};\r\n\r\nexport const deleteContact = id => dispatch => {\r\n    dispatch(action.deleteContactRequest())\r\n    \r\n    axios.delete(`/contacts/${id}`).then(() => dispatch(action.deleteContactSuccsess(id)))\r\n        .catch(error => dispatch(action.deleteContactError(error)));\r\n};","import { createSelector} from '@reduxjs/toolkit';\r\n\r\nexport const getIsLoadingContacts = state => state.contacts.loading;\r\nexport const getFilter =state=>state.contacts.filter\r\nexport const getError = state => state.contacts.error\r\nexport const getItems = state => state.contacts.items;\r\n\r\n\r\nexport const getVisibalContacts = createSelector(\r\n    [getItems, getFilter],\r\n    (items, filter) => {\r\n        const normalizedFilter = filter.toLowerCase();\r\n        return items.filter(contact =>\r\n            contact.name.toLowerCase().includes(normalizedFilter))\r\n    }\r\n)","import React, { Component } from 'react';\nimport PropsTypes from 'prop-types';\nimport style from './Style.module.css'\nimport {connect} from 'react-redux'\nimport * as operations from '../redux/Contacts/operations'\nimport * as selectors from '../redux/Contacts/contacts-selectors'\n\n\n\nclass Form extends Component{\n  state = {\n    name: '',\n    number: ''\n  }\n    \n  handleinput = (e) => {\n    this.setState({ [e.currentTarget.name]: e.currentTarget.value })\n  };\n      \n  handleSubmit = (e) => {\n    e.preventDefault();\n    const isIncludeName = !!this.props.value.find(contact => contact.name === this.state.name)\n    isIncludeName && alert(`${this.state.name} is already in contacts`)\n    !isIncludeName && this.props.onSubmit(this.state)\n \n    \n    this.reset();\n  }\n  \n  \n  reset = () => {\n    this.setState({ name: '', number: '' })\n  }\n  \n  render() {\n    \n    return (\n      <form onSubmit={this.handleSubmit}>\n        \n        <label className={style.label}> Name\n          <input\n            className={style.input_name}\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n            onChange={this.handleinput}\n            value={this.state.name}\n          />\n        </label> \n        <label className={style.label}>Number\n          <input\n            className={style.input_tel}\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n            onChange={this.handleinput}\n            value={this.state.number}\n          />\n        </label>\n\n        <button type=\"submit\" className={style.btn_add}>Add contact</button>\n\n      </form>\n\n    )\n  }\n\n}\n\nForm.propTypes = {\n  onSubmit: PropsTypes.func.isRequired,\n}\n\nconst mapStateToProps = (state) => ({\n  value: selectors.getItems(state)\n})\n\nconst mapDispatchToProps = dispatch => ({\n  onSubmit: (data) => dispatch(operations.addContact(data)),\n})\n\nexport default connect(mapStateToProps,mapDispatchToProps)(Form);","import React from 'react';\nimport PropsTypes from 'prop-types';\nimport style from './Style.module.css'\nimport { connect } from 'react-redux'\nimport * as actions from '../redux/Contacts/action'\nimport * as selectors from '../redux/Contacts/contacts-selectors'\n\nconst Filter = ({ value, onChange }) => {\n  return (\n    <label className={style.label}> Find contacts by name\n      <input type=\"text\" value={value} onChange={onChange} />\n    </label>\n            \n  )\n}\n\nFilter.propTypes = {\n  onChange: PropsTypes.func.isRequired\n}\n    \nconst mapStateToProps = state => ({\n  value: selectors.getFilter(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onChange:(e)=>dispatch(actions.changeFilter(e.currentTarget.value))\n})\n\n\n\n\nexport default connect(mapStateToProps,mapDispatchToProps)(Filter);","import React from 'react';\nimport PropsTypes from 'prop-types';\nimport { connect } from 'react-redux'\nimport * as operations from '../redux/Contacts/operations'\nimport style from './Style.module.css'\nimport * as selectors from '../redux/Contacts/contacts-selectors'\n\nconst Render = ({ value, onDeleteContact }) => {\n\n    return (\n         <ul>\n        {value.map((contact) => {\n            return <li className={style.contact_item} key={contact.id}>{contact.name}: {contact.number} <button type='button' className={style.btn_del} onClick={()=>onDeleteContact(contact.id) }>delete</button></li>\n          })}\n        </ul>\n    )\n}\n\nRender.propTypes = {\n  value: PropsTypes.array.isRequired,\n  onDeleteContact:PropsTypes.func.isRequired\n}\n\nconst mapStateToProps = (state) => ({\n   value:selectors.getVisibalContacts(state)\n})\n\n\nconst mapDispatchToProps = dispatch => ({\n  onDeleteContact:(id)=>dispatch(operations.deleteContact(id))\n})\n\n\nexport default connect(mapStateToProps,mapDispatchToProps)(Render);","import React, { Component } from 'react';\nimport Form from './Form/Form'\nimport Filter from './Filter/Filter'\nimport Render from './Render/RenderContactList'\nimport { connect } from 'react-redux'\nimport * as operations from './redux/Contacts/operations'\nimport * as selectors from './redux/Contacts/contacts-selectors'\n\n\nclass App extends Component{\n  \n  \n  componentDidMount() {\n    this.props.fetchContacts()\n}\n\n\n  render() {\n \n    return (\n      <div>\n        {this.props.error&&<h1>Error,please try later</h1>}\n        {this.props.isLoadingContacts && <h1>Loading...</h1>}\n        <h1>Phonebook</h1>\n        <Form onSubmit={this.submitForm} />\n         <h2>Contacts</h2>\n        <Filter />\n        <Render/>\n      </div>\n\n    )\n  }\n}\n\nconst mapStateToProps = state => ({\n  isLoadingContacts: selectors.getIsLoadingContacts(state),\n  error:selectors.getError(state)\n});\nconst mapDispatchToProps = dispatch => ({\n  fetchContacts:()=>dispatch(operations.fetchContact())\n})\n  \n\n\nexport default connect(mapStateToProps,mapDispatchToProps)(App);","import { combineReducers } from 'redux';\n\nimport { createReducer } from '@reduxjs/toolkit';\n\nimport * as actions from './action'\n\nconst items = createReducer([], {\n    [actions.fetchContactSuccsess]:(state,{payload})=>payload,\n    [actions.addContactSuccsess]: (state, {payload}) => [...state, payload],\n    [actions.deleteContactSuccsess]:(state, {payload})=>state.filter(contact => contact.id !== payload),\n})\n\nconst loading = createReducer(false, {\n  [actions.fetchContactRequest]: () => true,\n  [actions.fetchContactSuccsess]: () => false,\n  [actions.fetchContactError]: () => false,\n  [actions.addContactRequest]: () => true,\n  [actions.addContactSuccsess]: () => false,\n  [actions.addContactError]: () => false,\n  [actions.deleteContactRequest]: () => true,\n  [actions.deleteContactSuccsess]: () => false,\n  [actions.deleteContactError]: () => false,\n});\n\nconst filter = createReducer('', {\n    [actions.changeFilter]:(_,{payload})=>payload,\n})\n\nconst error = createReducer(null, {\n    // [actions.fetchContactError]:() => true,\n    [actions.fetchContactError]: (state,{payload})=>payload,\n    [actions.addContactError]:(state,{payload})=>payload,\n    [actions.deleteContactError]:(state,{payload})=>payload\n})\n\nexport default combineReducers({\n    items,\n    filter,\n    loading,\n    error\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// import { combineReducers } from 'redux';\n// import types from './types';\n\n// const items = (state = [], { type, payload }) => {\n//   switch (type) {\n//     case types.ADD:\n//       return [...state, payload];\n\n//     case types.DELETE:\n//       return state.filter(({ id }) => id !== payload);\n\n//     default:\n//       return state;\n//   }\n// };\n\n// const filter = (state = '', { type, payload }) => {\n//   switch (type) {\n//     case types.CHANGE_FILTER:\n//       return payload;\n\n//     default:\n//       return state;\n//   }\n// };\n\n\n// export default combineReducers({\n//   items,\n//   filter,\n// });","import contactsReducer from './Contacts/reducer';\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport {\n    FLUSH,\n    REHYDRATE,\n    PAUSE,\n    PERSIST,\n    PURGE,\n    REGISTER,\n} from 'redux-persist';\n\n\nconst middleware = [...getDefaultMiddleware({\n  serializableCheck: {\n    ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n  },\n})]\n\n\n\nexport const store = configureStore({\n  reducer: {\n    contacts: contactsReducer,\n  },\n  middleware,\n  devTools: process.env.NODE_ENV === 'development',\n})\n\n//  export let persistor = persistStore(store)\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as store from './redux/store'\n// import { PersistGate } from 'redux-persist/integration/react'\nimport { Provider } from 'react-redux';\n\nimport 'modern-normalize/modern-normalize.css';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      {/* <PersistGate loading={null} persistor={store.persistor}> */}\n        <App />\n      {/* </PersistGate> */}\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Style_label__Zs0X2\",\"input_name\":\"Style_input_name__1sq64\",\"input_tel\":\"Style_input_tel__ewRfJ\",\"btn_add\":\"Style_btn_add__26Nqh\"};"],"sourceRoot":""}